#BlueJ class context
comment0.target=TextInputFile
comment0.text=\r\n\ The\ TextInputFile\ class\ reads\ text\ from\ a\ file.\ The\ class\ contains\ the\ same\r\n\ readLine\ method\ as\ BufferedReader\ and\ adds\ methods\ to\ read\ all\ the\ Java\r\n\ primitive\ data\ types\ with\ integrated\ error\ checking.\ It\ also\ handles\ EOF.\r\n\ \r\n\ @author\ Sam\ Scott\ (code\ cleanup\ for\ version\ 5.0)\r\n\ @author\ Tom\ West\r\n\ @version\ 6.0\ May\ 2018\r\n
comment1.params=
comment1.target=TextInputFile()
comment1.text=\r\n\ Contructor\ -\ TextInputFile\ to\ read\ from\ standard\ input.\r\n
comment10.params=
comment10.target=java.lang.String\ readAToken()
comment10.text=\r\n\ Reads\ in\ input\ from\ the\ keyboard\ buffer\ until\ it\ hits\ a\ whitespace,\ which\r\n\ indicates\ the\ end\ of\ a\ token.\r\n\r\n\ @return\ the\ string\ (word)\ that\ was\ read.\r\n
comment11.params=
comment11.target=boolean\ nextBoolean()
comment11.text=\r\n\ Read\ a\ boolean\ from\ the\ file.\ The\ actual\ text\ in\ the\ file\ must\ be\ either\r\n\ "true"\ or\ "false"\ although\ case\ is\ irrelvant.\r\n\r\n\ @return\ The\ boolean\ value\ read\ from\ the\ file.\r\n
comment12.params=
comment12.target=byte\ nextByte()
comment12.text=\r\n\ Read\ an\ 8-bit\ integer\ (a\ "byte")\ from\ the\ file.\ The\ actual\ text\ in\ the\r\n\ file\ must\ be\ a\ number\ from\ -128\ to\ 127.\r\n\r\n\ @return\ The\ byte\ value\ read\ from\ the\ file.\r\n
comment13.params=
comment13.target=char\ nextChar()
comment13.text=\r\n\ Read\ a\ single\ character\ from\ the\ file.\ Note\ that\ this\ discards\ any\r\n\ whitespace.\ If\ you\ want\ to\ get\ every\ character\ on\ the\ line,\ use\ the\r\n\ readLine\ ()\ method.\r\n\r\n\ @return\ The\ character\ read\ from\ the\ file.\r\n
comment14.params=
comment14.target=double\ nextDouble()
comment14.text=\r\n\ Read\ a\ double\ precision\ floating\ point\ number\ (a\ "double")\ from\ the\ file.\r\n\r\n\ @return\ The\ double\ value\ read\ from\ the\ file.\r\n
comment15.params=
comment15.target=float\ nextFloat()
comment15.text=\r\n\ Read\ a\ floating\ point\ number\ (a\ "float")\ from\ the\ file.\r\n\r\n\ @return\ The\ float\ value\ read\ from\ the\ file.\r\n
comment16.params=
comment16.target=int\ nextInt()
comment16.text=\r\n\ Read\ a\ 32-bit\ integer\ (an\ "int")\ from\ the\ file.\ The\ actual\ text\ in\ the\r\n\ file\ must\ be\ a\ number\ from\ -2147483648\ to\ 2147483647.\r\n\r\n\ @return\ The\ int\ value\ read\ from\ the\ file.\r\n
comment17.params=
comment17.target=java.lang.String\ nextLine()
comment17.text=\r\n\ Read\ a\ full\ line\ of\ text\ from\ the\ file.\r\n\r\n\ @return\ The\ line\ of\ text\ read\ from\ the\ file.\r\n
comment18.params=
comment18.target=long\ nextLong()
comment18.text=\r\n\ Read\ a\ 64-bit\ integer\ (a\ "long")\ from\ the\ file.\r\n\r\n\ @return\ The\ long\ value\ read\ from\ the\ file.\r\n
comment19.params=
comment19.target=short\ nextShort()
comment19.text=\r\n\ Read\ a\ 16-bit\ integer\ (a\ "short")\ from\ the\ file.\ The\ actual\ text\ in\ the\r\n\ file\ must\ be\ a\ number\ from\ -32768\ to\ 32767.\r\n\r\n\ @return\ The\ short\ value\ read\ from\ the\ file.\r\n
comment2.params=file
comment2.target=TextInputFile(java.io.File)
comment2.text=\r\n\ Contructor\ -\ TextInputFile\ to\ read\ from\ a\ File.\r\n\r\n\ @param\ file\ -\ File\ to\ be\ opened.\r\n
comment20.params=
comment20.target=java.lang.String\ next()
comment20.text=\r\n\ Read\ a\ whitespace\ delimited\ token\ from\ the\ file.\r\n\r\n\ @return\ The\ token\ read\ from\ the\ file.\r\n
comment3.params=fileName
comment3.target=TextInputFile(java.lang.String)
comment3.text=\r\n\ Contructor\ -\ TextInputFile\ to\ read\ from\ file\ with\ specified\ name.\r\n\r\n\ @param\ fileName\ -\ Name\ of\ the\ file\ to\ be\ opened.\r\n
comment4.params=
comment4.target=void\ close()
comment4.text=\r\n\ Close\ the\ file\ to\ further\ reading.\r\n
comment5.params=
comment5.target=boolean\ eof()
comment5.text=\r\n\ Return\ whether\ there\ is\ an\ eof\ before\ the\ next\ token.\r\n\r\n\ @return\ Whether\ there\ is\ an\ eof\ before\ the\ next\ token\r\n
comment6.params=ch
comment6.target=void\ pushACharacter(char)
comment6.text=\r\n\ Place\ the\ character\ in\ the\ unread\ position.\ The\ next\ time\ a\ character\ is\r\n\ read,\ this\ one\ will\ be\ returned.\r\n\r\n\ @param\ ch\ -\ The\ character\ to\ be\ pushed\ into\ the\ unread\ position.\r\n
comment7.params=
comment7.target=char\ readACharacter()
comment7.text=\r\n\ Read\ a\ single\ character\ from\ the\ file.\ If\ we\ reach\ EOF\ before\ reading\ the\r\n\ character,\ display\ an\ error\ message\ and\ exit.\r\n\r\n\ @return\ The\ character\ read\ from\ the\ file.\r\n
comment8.params=
comment8.target=char\ readACharacterThrowsEOF()
comment8.text=\r\n\ Read\ a\ single\ character\ from\ the\ file.\r\n\r\n\ @exception\ EOFException\ -\ Thrown\ if\ attempt\ to\ read\ past\ EOF.\r\n\ @return\ The\ character\ read\ from\ the\ file.\r\n
comment9.params=
comment9.target=void\ readALineFromFile()
comment9.text=\r\n\ Reads\ a\ line\ from\ the\ file.\r\n\r\n\ @exception\ EOFException\ -\ Thrown\ if\ attempt\ to\ read\ past\ EOF.\r\n
numComments=21
