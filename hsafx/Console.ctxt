#BlueJ class context
comment0.target=Console
comment0.text=\r\n\ This\ is\ a\ re-implementation\ of\ the\ old\ hsa\ console\ by\ Holt\ Software\r\n\ Associates\ in\ order\ to\ use\ Java\ FX,\ and\ to\ present\ an\ API\ consistent\ with\ the\r\n\ GraphicsContext\ and\ Scanner\ classes.\r\n\ <p>\r\n\ UPDATE\ HISTORY\:\ Some\ update\ history\ details\ have\ been\ lost.\ Notably\ the\r\n\ addition\ of\ mouse\ routines\ (Josh\ Gray?),\ anti-aliasing\ (Josh\ Gray?),\ and\r\n\ keyboard\ listener\ routines\ (Sam\ Scott,\ date\ unknown)\r\n\ <p>\r\n\ Update\ September\ 2014\:\ Fixed\ bug\ in\ getRow()\ and\ getColumn();\ they\ now\ report\r\n\ the\ current\ cursor\ position\ without\ requiring\ a\ print()\ first.\r\n\ <p>\r\n\ Update\ August\ 2012\:\ Changed\ synchronization\ to\ synchronize\ on\ the\ associated\r\n\ Console\ object.\ Now\ application\ writers\ can\ also\ synchronize\ on\ the\ Console\r\n\ object\ to\ kill\ the\ last\ remaining\ cases\ of\ screen\ flicker.\r\n\ <p>\r\n\ Update\ April\ 30,\ 2010\:\ Re-done\ from\ scratch\ in\ Swing\ with\ much\ code\ imported\r\n\ from\ the\ old\ hsa\ console.\ The\ main\ goals\ were\ to\ reduce\ screen\ flicker\ during\r\n\ animations\ and\ eliminate\ a\ couple\ of\ small\ bugs\ in\ the\ input\ routines.\r\n\r\n\ @author\ Sam\ Scott\ (conversion\ to\ Swing,\ conversion\ to\ FX)\r\n\ @author\ Michael\ Harwood\ (minor\ text\ printing\ bug\ fix)\r\n\ @author\ Josh\ Gray\ (getRow()/getColumn()\ bug\ fix)\r\n\ @author\ Tom\ West\ (original\ hsa\ code)\r\n\ @version\ 6.0\ May\ 24,\ 2018\r\n
comment1.params=width\ height\ fontSize\ title\ container
comment1.target=Console(double,\ double,\ int,\ java.lang.String,\ ConsoleView)
comment1.text=\r\n\ Creates\ a\ new\ console.\r\n\r\n\ @param\ width\ \ \ \ \ The\ width\ in\ pixels\r\n\ @param\ height\ \ \ \ The\ height\ in\ pixels\r\n\ @param\ fontSize\ \ The\ font\ size\ for\ print/println\r\n\ @param\ title\ \ \ \ \ The\ title\ of\ the\ window\r\n\ @param\ container\ The\ ConsoleView\ object\ container\r\n
comment10.params=r\ g\ b
comment10.target=void\ setStroke(int,\ int,\ int)
comment100.params=key
comment100.target=boolean\ isKeyDown(java.lang.String)
comment100.text=\r\n\ Call\ this\ to\ find\ out\ whether\ or\ not\ a\ particular\ key\ is\ being\ held\ down.\r\n\r\n\ @param\ key\ The\ String\ keycode\ for\ the\ key\ you\ are\ interested\ in\ (the\ same\r\n\ \ \ \ \ \ \ \ \ \ \ \ one\ returned\ by\ getKeyCode())\r\n\ @return\ True\ if\ the\ key\ is\ currently\ held\ down,\ false\ otherwise\r\n
comment101.params=key
comment101.target=boolean\ isKeyDown(char)
comment101.text=\r\n\ Call\ this\ to\ find\ out\ whether\ or\ not\ a\ particular\ character\ is\ being\ held\r\n\ down.\r\n\r\n\ @param\ key\ The\ character\ code\ for\ the\ key\r\n\ @return\ True\ if\ the\ key\ is\ currently\ held\ down,\ false\ otherwise\r\n
comment102.params=milliSeconds
comment102.target=void\ sleep(long)
comment102.text=\r\n\ A\ simplified\ sleep\ function\ handles\ the\ try/catch\ or\ "throws\r\n\ InterruptedException"\ that\ Thread.sleep()\ produces.\r\n\r\n\ @param\ milliSeconds\ the\ time\ to\ sleep\ in\ ms.\r\n
comment103.params=
comment103.target=void\ quit()
comment103.text=\r\n\ Quits\ the\ program.\r\n
comment104.params=
comment104.target=void\ refresh()
comment104.text=\r\n\ Refreshes\ the\ screen.\ This\ will\ be\ called\ automatically\ unless\ you\ turn\r\n\ auto-refresh\ off.\r\n
comment105.params=
comment105.target=void\ autoRefreshOn()
comment105.text=\r\n\ Turns\ on\ auto-refresh\ (refreshes\ the\ screen\ 60\ times\ per\ second)\r\n
comment106.params=
comment106.target=void\ autoRefreshOff()
comment106.text=\r\n\ Turns\ off\ auto-refresh.\ With\ auto-refresh\ off,\ you\ must\ call\ refresh()\r\n\ yourself\ to\ see\ the\ results\ of\ any\ drawing.\ Use\ this\ if\ you\ are\ doing\r\n\ animation\ or\ coding\ a\ game\ loop.\ Do\ all\ the\ drawing\ first,\ then\ call\r\n\ refresh(),\ then\ sleep(),\ then\ repeat.\r\n
comment107.params=message\ title
comment107.target=void\ showDialog(java.lang.String,\ java.lang.String)
comment107.text=\r\n\ Shows\ a\ popup\ dialog\ using\ Swing\ JOptionPane.\ It\ does\ not\ display\ an\ icon\r\n\r\n\ @param\ message\ to\ display\r\n\ @param\ title\ \ \ for\ the\ popup\ message\ box\r\n
comment108.params=message\ title
comment108.target=java.lang.String\ showInputDialog(java.lang.String,\ java.lang.String)
comment108.text=\r\n\ This\ uses\ Swing\ JOptionPane\ to\ get\ text\ from\ the\ user.\ The\ text\ can\ be\r\n\ from\ one\ letter,\ or\ a\ word,\ to\ a\ whole\ line.\ The\ text\ is\ terminated\ with\r\n\ Enter.\ It\ displays\ the\ Question\ icon.\r\n\ <p>\r\n\ Sample\ code\:\r\n\ <pre>\r\n\ name\ \=\ c.showInputDialog("What\ is\ your\ name?",\ "");\r\n\ //handle\ CANCEL\ option\r\n\ if(name\ \=\=\ null){\r\n\ System.out.println("Cancel\ pressed");\r\n\ System.exit(0);\ //or\ do\ something\ else\r\n\ }\r\n\ //handle\ OK\ option\ with\ no\ text\r\n\ if\ (name.equals(""))\ {\r\n\ name\ \=\ "No\ Name";\r\n\ }</pre>\r\n\r\n\ @param\ message\ to\ display\r\n\ @param\ title\ \ \ for\ the\ popup\ message\ box\r\n\ @return\ The\ string\ typed\ in.\ If\ the\ Cancel\ button\ is\ pressed,\ the\ return\r\n\ value\ is\ equal\ to\ null.\ If\ OK\ is\ pressed\ without\ anything\ typed\ in,\ the\r\n\ return\ value\ is\ a\ zero\ length\ string.\r\n
comment109.params=buttonNum
comment109.target=boolean\ getMouseButton(int)
comment109.text=\r\n\ Returns\ true\ if\ the\ specified\ button\ is\ pressed,\ false\ otherwise.\r\n\ <p>\r\n\ Buttons\ are\ numbered\ 0,\ 1\ or\ 2.\r\n\r\n\ @param\ buttonNum\ mouse\ button\ number\ (0,1,2)\r\n\ @return\ T/F\ if\ that\ button\ has\ been\ pressed.\r\n
comment11.params=r\ g\ b\ a
comment11.target=void\ setStroke(int,\ int,\ int,\ double)
comment110.params=
comment110.target=int\ getMouseClick()
comment110.text=\r\n\ Returns\ non-zero\ if\ the\ mouse\ has\ been\ clicked\ since\ the\ last\ time\ the\r\n\ click\ was\ queried,\ zero\ if\ the\ mouse\ was\ not\ clicked.\r\n\ <p>\r\n\ 1\ \=\ single\ click\ 2\ \=\ double\ click\ 3\ \=\ triple\ click\ etc.\r\n\r\n\ @return\ number\ of\ clicks\r\n
comment111.params=
comment111.target=double\ getMouseX()
comment111.text=\r\n\ Returns\ the\ X\ coordinate\ of\ the\ mouse\ pointer\ position\ within\ the\ drawing\r\n\ area.\r\n\r\n\ @return\ x\ coordinate\ of\ mouse\ pointer\ position\r\n
comment112.params=
comment112.target=double\ getMouseY()
comment112.text=\r\n\ Returns\ the\ Y\ coordinate\ of\ the\ mouse\ pointer\ position\ within\ the\ drawing\r\n\ area.\r\n\r\n\ @return\ y\ coordinate\ of\ mouse\ pointer\ position\r\n
comment113.params=
comment113.target=boolean\ isMouseDragged()
comment113.text=\r\n\ Returns\ true\ of\ mouse\ is\ being\ dragged\ (button\ down\ and\ mouse\ moving\r\n\ triggers\ a\ drag\ event)\r\n\r\n\ @return\r\n
comment114.params=
comment114.target=double\ getMouseDX()
comment114.text=\r\n\ Returns\ the\ distance\ dragged\ in\ the\ x-axis\ (positive\ or\ negative)\r\n\r\n\ @return\ distance\ in\ pixels\ dragged\ in\ x-direction\r\n
comment115.params=
comment115.target=double\ getMouseDY()
comment115.text=\r\n\ Returns\ the\ distance\ dragged\ in\ the\ y-axis\ (positive\ or\ negative)\r\n\r\n\ @return\ distance\ in\ pixels\ dragged\ in\ y-direction\r\n
comment116.params=row\ col
comment116.target=void\ setCursorPos(int,\ int)
comment116.text=\r\n\ Sets\ the\ cursor\ to\ the\ specified\ row\ and\ column.Adapted\ from\ hsa.\r\n\r\n\ @param\ row\ the\ row\ to\ position\ the\ cursor\ on\r\n\ @param\ col\ the\ column\ to\ position\ the\ cursor\ on\r\n
comment117.params=
comment117.target=void\ clearKeysDown()
comment118.params=e
comment118.target=void\ keyPressed(javafx.scene.input.KeyEvent)
comment118.text=\r\n\ Places\ a\ keystroke\ in\ the\ keyboard\ buffer.\ It\ is\ synchronized\ so\ that\r\n\ there\ can't\ be\ a\ problem\ with\ input\ being\ taken\ off\ the\ keyboard\ buffer\r\n\ and\ placed\ on\ the\ keyboard\ buffer\ at\ the\ same\ time.\ Adapted\ from\ hsa.\r\n\ Modified\ by\ Sam\ to\ record\ the\ current\ key\ held\ down.\r\n\r\n\ @param\ e\r\n
comment119.params=e
comment119.target=void\ keyReleased(javafx.scene.input.KeyEvent)
comment119.text=\r\n\ Set\ current\ key\ to\ the\ null\ code\r\n\r\n\ @param\ e\r\n
comment12.params=color
comment12.target=void\ setBackground(java.lang.String)
comment12.text=\r\n\ Sets\ the\ color\ to\ use\ for\ the\ stroke\ commands\r\n\r\n\ @param\ color\ Any\ legal\ CSS\ color\ string\ (color\ name,\ hex\ color,\ rgb,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ rgba,\ etc.)(color\r\n
comment120.params=e
comment120.target=void\ keyTyped(javafx.scene.input.KeyEvent)
comment120.text=\r\n\ Does\ nothing.\ Called\ by\ the\ system\ when\ a\ key\ is\ typed.\r\n\r\n\ @param\ e\r\n
comment121.params=
comment121.target=void\ cursorOff()
comment122.params=
comment122.target=void\ cursorOn()
comment123.params=
comment123.target=void\ toggleVisibleCursor()
comment124.params=row\ col\ text
comment124.target=void\ drawText(int,\ int,\ java.lang.String)
comment124.text=\r\n\ Draws\ the\ specified\ text\ to\ the\ screen\ at\ the\ specified\ row\ and\ column\r\n\ using\ the\ specified\ foreground\ and\ background\ colours.\ Adapted\ from\ hsa.\r\n\ This\ is\ imitating\ the\ System.out.print()\ command\ to\ use\ colours\ on\ the\r\n\ HSA\ graphics\ console.\r\n\r\n\ @param\ row\ \ the\ row\ that\ the\ text\ will\ be\ printed\r\n\ @param\ col\ \ the\ column\ that\ he\ text\ starts\ in\r\n\ @param\ text\ the\ text\ to\ print\r\n
comment125.params=row\ col
comment125.target=void\ clearToEOL(int,\ int)
comment125.text=\r\n\ Clears\ a\ rectangle\ on\ console\ canvas\ from\ the\ specified\ row\ and\ column\ to\r\n\ the\ end\ of\ line.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ row\ the\ row\ specified\r\n\ @param\ col\ the\ column\ specified\r\n
comment126.params=
comment126.target=void\ scrollUpALine()
comment126.text=\r\n\ Scrolls\ up\ the\ entire\ ConsoleCanvas\ a\ single\ line.\ The\ blank\ space\ at\ the\r\n\ bottom\ is\ filled\ in\ the\ specified\ colour.\ Adapted\ from\ hsa.\r\n
comment127.params=e
comment127.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment127.text=This\ is\ the\ action\ performed\ for\ the\ Swing\ Timer\ that\ is\ started\ in\ the\ constructor
comment128.params=
comment128.target=void\ invertScreen()
comment129.params=
comment129.target=void\ erasePreviousChar()
comment129.text=\r\n\ Erases\ the\ previous\ character\ in\ a\ line\ of\ input.\ Called\ when\ the\ user\r\n\ presses\ backspace\ when\ typing.\ Adapted\ from\ hsa.\r\n
comment13.params=r\ g\ b
comment13.target=void\ setBackground(int,\ int,\ int)
comment130.params=
comment130.target=void\ eraseLineOfInput()
comment130.text=\r\n\ Erases\ the\ entire\ line\ of\ input.\ Called\ when\ the\ user\ presses\ Ctrl+U\ when\r\n\ typing.\ Adapted\ from\ hsa.\r\n
comment131.params=e
comment131.target=void\ mouseClicked(javafx.scene.input.MouseEvent)
comment131.text=\r\n\ MOUSE\ LISTENER\ EVENTS\r\n\ "Background"\ mouse\ methods\r\n\ (i.e.,\ don't\ try\ to\ invoke\ these\ directly\!)\r\n********************************************
comment132.params=e
comment132.target=void\ mouseDragged(javafx.scene.input.MouseEvent)
comment133.params=e
comment133.target=void\ mouseEntered(javafx.scene.input.MouseEvent)
comment134.params=e
comment134.target=void\ mouseExited(javafx.scene.input.MouseEvent)
comment135.params=e
comment135.target=void\ mouseMoved(javafx.scene.input.MouseEvent)
comment136.params=e
comment136.target=void\ mousePressed(javafx.scene.input.MouseEvent)
comment137.params=e
comment137.target=void\ mouseReleased(javafx.scene.input.MouseEvent)
comment14.params=r\ g\ b\ a
comment14.target=void\ setBackground(int,\ int,\ int,\ double)
comment15.params=width
comment15.target=void\ setLineWidth(int)
comment15.text=\r\n\ Sets\ the\ line\ width\ for\ stroke\ commands\r\n\r\n\ @param\ width\ A\ line\ width\ in\ pixels\r\n
comment16.params=x\ y\ width\ height
comment16.target=void\ fillRect(double,\ double,\ double,\ double)
comment16.text=\r\n\ Draws\ a\ filled\ rectangle\r\n\r\n\ @param\ x\ \ \ \ \ \ left\ coordinate\ in\ pixels\r\n\ @param\ y\ \ \ \ \ \ top\ coordinate\ in\ pixels\r\n\ @param\ width\ \ width\ of\ rectangle\r\n\ @param\ height\ height\ of\ rectangle\r\n
comment17.params=x\ y\ width\ height
comment17.target=void\ strokeRect(double,\ double,\ double,\ double)
comment17.text=\r\n\ Draws\ a\ rectangle\ outline\r\n\r\n\ @param\ x\ \ \ \ \ \ left\ coordinate\ in\ pixels\r\n\ @param\ y\ \ \ \ \ \ top\ coordinate\ in\ pixels\r\n\ @param\ width\ \ width\ of\ rectangle\r\n\ @param\ height\ height\ of\ rectangle\r\n
comment18.params=x\ y\ width\ height
comment18.target=void\ fillOval(double,\ double,\ double,\ double)
comment18.text=\r\n\ Draws\ a\ filled\ oval,\ inscribed\ inside\ the\ rectangle\ defined\ by\ the\r\n\ arguments\ provided.\r\n\r\n\ @param\ x\ \ \ \ \ \ left\ coordinate\ in\ pixels\r\n\ @param\ y\ \ \ \ \ \ top\ coordinate\ in\ pixels\r\n\ @param\ width\ \ width\ of\ rectangle\r\n\ @param\ height\ height\ of\ rectangle\r\n
comment19.params=x\ y\ width\ height
comment19.target=void\ strokeOval(double,\ double,\ double,\ double)
comment19.text=\r\n\ Draws\ an\ outline\ of\ an\ oval,\ inscribed\ inside\ the\ rectangle\ defined\ by\r\n\ the\ arguments\ provided.\r\n\r\n\ @param\ x\ \ \ \ \ \ left\ coordinate\ in\ pixels\r\n\ @param\ y\ \ \ \ \ \ top\ coordinate\ in\ pixels\r\n\ @param\ width\ \ width\ of\ rectangle\r\n\ @param\ height\ height\ of\ rectangle\r\n
comment2.params=s\ myFont
comment2.target=double\ reportSize(java.lang.String,\ javafx.scene.text.Font)
comment20.params=x1\ y1\ x2\ y2
comment20.target=void\ strokeLine(double,\ double,\ double,\ double)
comment20.text=\r\n\ Draws\ a\ line.\r\n\r\n\ @param\ x1\ X\ coordinate\ of\ first\ endpoint\r\n\ @param\ y1\ Y\ coordinate\ of\ first\ endpoint\r\n\ @param\ x2\ X\ coordinate\ of\ second\ endpoint\r\n\ @param\ y2\ Y\ coordinate\ of\ second\ endpoint\r\n
comment21.params=xs\ ys\ num
comment21.target=void\ strokePolygon(double[],\ double[],\ int)
comment21.text=\r\n\ Draws\ a\ polygon\ outline.\r\n\r\n\ @param\ xs\ \ An\ array\ of\ x\ coordinates\ for\ each\ vertex\r\n\ @param\ ys\ \ An\ array\ of\ y\ coordinates\ for\ each\ vertex\r\n\ @param\ num\ The\ number\ of\ vertices\ in\ the\ polygon\r\n
comment22.params=xs\ ys\ num
comment22.target=void\ fillPolygon(double[],\ double[],\ int)
comment22.text=\r\n\ Draws\ a\ filled\ polygon.\r\n\r\n\ @param\ xs\ \ An\ array\ of\ x\ coordinates\ for\ each\ vertex\r\n\ @param\ ys\ \ An\ array\ of\ y\ coordinates\ for\ each\ vertex\r\n\ @param\ num\ The\ number\ of\ vertices\ in\ the\ polygon\r\n
comment23.params=x\ y\ width\ height\ startAngle\ arcAngle
comment23.target=void\ strokeArc(double,\ double,\ double,\ double,\ double,\ double)
comment23.text=\r\n\ Draws\ an\ outline\ of\ a\ portion\ of\ an\ oval,\ inscribed\ inside\ the\ rectangle\r\n\ defined\ by\ the\ arguments\ provided.\r\n\r\n\ @param\ x\ \ \ \ \ \ \ \ \ \ left\ coordinate\ in\ pixels\r\n\ @param\ y\ \ \ \ \ \ \ \ \ \ top\ coordinate\ in\ pixels\r\n\ @param\ width\ \ \ \ \ \ width\ of\ rectangle\r\n\ @param\ height\ \ \ \ \ height\ of\ rectangle\r\n\ @param\ startAngle\ angle\ in\ degrees\ to\ start\ drawing\ it\ (0\ \=\ east,\ 90\ \=\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ north,\ 180\ \=\ west,\ 270\ \=\ south,\ etc.)\r\n\ @param\ arcAngle\ \ \ number\ of\ degrees\ of\ ark\ to\ draw\ (counter-clockwise)\r\n
comment24.params=x\ y\ width\ height\ startAngle\ arcAngle
comment24.target=void\ fillArc(double,\ double,\ double,\ double,\ double,\ double)
comment24.text=\r\n\ Draws\ an\ filled\ in\ portion\ of\ an\ oval,\ inscribed\ inside\ the\ rectangle\r\n\ defined\ by\ the\ arguments\ provided.\r\n\r\n\ @param\ x\ \ \ \ \ \ \ \ \ \ left\ coordinate\ in\ pixels\r\n\ @param\ y\ \ \ \ \ \ \ \ \ \ top\ coordinate\ in\ pixels\r\n\ @param\ width\ \ \ \ \ \ width\ of\ rectangle\r\n\ @param\ height\ \ \ \ \ height\ of\ rectangle\r\n\ @param\ startAngle\ angle\ in\ degrees\ to\ start\ drawing\ it\ (0\ \=\ east,\ 90\ \=\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ north,\ 180\ \=\ west,\ 270\ \=\ south,\ etc.)\r\n\ @param\ arcAngle\ \ \ number\ of\ degrees\ of\ ark\ to\ draw\ (counter-clockwise)\r\n
comment25.params=x\ y\ width\ height\ xRadius\ yRadius
comment25.target=void\ strokeRoundRect(double,\ double,\ double,\ double,\ double,\ double)
comment25.text=\r\n\ Draws\ the\ outline\ of\ a\ rectangle\ with\ rounded\ corners.\r\n\r\n\ @param\ x\ \ \ \ \ \ \ left\ coordinate\ in\ pixels\r\n\ @param\ y\ \ \ \ \ \ \ top\ coordinate\ in\ pixels\r\n\ @param\ width\ \ \ width\ of\ rectangle\r\n\ @param\ height\ \ height\ of\ rectangle\r\n\ @param\ xRadius\ The\ width\ of\ a\ rounded\ corner\r\n\ @param\ yRadius\ The\ height\ of\ a\ rounded\ corner\r\n
comment26.params=x\ y\ width\ height\ xRadius\ yRadius
comment26.target=void\ fillRoundRect(double,\ double,\ double,\ double,\ double,\ double)
comment26.text=\r\n\ Draws\ a\ filled\ rectangle\ with\ rounded\ corners.\r\n\r\n\ @param\ x\ \ \ \ \ \ \ left\ coordinate\ in\ pixels\r\n\ @param\ y\ \ \ \ \ \ \ top\ coordinate\ in\ pixels\r\n\ @param\ width\ \ \ width\ of\ rectangle\r\n\ @param\ height\ \ height\ of\ rectangle\r\n\ @param\ xRadius\ The\ width\ of\ a\ rounded\ corner\r\n\ @param\ yRadius\ The\ height\ of\ a\ rounded\ corner\r\n
comment27.params=str\ x\ y
comment27.target=void\ fillText(java.lang.String,\ double,\ double)
comment27.text=\r\n\ Draws\ text\ on\ the\ console.\r\n\r\n\ @param\ str\ The\ text\ to\ draw\r\n\ @param\ x\ \ \ The\ x\ location\ of\ the\ left\ edge\ of\ the\ text\r\n\ @param\ y\ \ \ The\ y\ location\ of\ the\ bottom\ of\ the\ text\r\n
comment28.params=str\ x\ y
comment28.target=void\ strokeText(java.lang.String,\ double,\ double)
comment28.text=\r\n\ Draws\ outlined\ text\ on\ the\ console.\r\n\r\n\ @param\ str\ The\ text\ to\ draw\r\n\ @param\ x\ \ \ The\ x\ location\ of\ the\ left\ edge\ of\ the\ text\r\n\ @param\ y\ \ \ The\ y\ location\ of\ the\ bottom\ of\ the\ text\r\n
comment29.params=fname\ fsize
comment29.target=void\ setFont(java.lang.String,\ double)
comment29.text=\r\n\ Sets\ the\ font\ to\ use\ for\ fillText\ and\ strokeText.\r\n\r\n\ @param\ fname\ A\ legal\ font\ name\r\n\ @param\ fsize\ The\ size\ of\ the\ font\ in\ pixels\r\n
comment3.params=
comment3.target=void\ close()
comment3.text=\r\n\ Terminates\ the\ program.\r\n
comment30.params=img\ x\ y
comment30.target=void\ drawImage(javafx.scene.image.Image,\ double,\ double)
comment30.text=\r\n\ Draws\ an\ image\ on\ the\ console.\r\n\r\n\ @param\ img\ The\ Image\ object\ to\ draw\r\n\ @param\ x\ \ \ The\ location\ of\ the\ left\ side\r\n\ @param\ y\ \ \ The\ location\ of\ the\ top\ of\ the\ image\r\n
comment31.params=img\ x\ y\ width\ height
comment31.target=void\ drawImage(javafx.scene.image.Image,\ double,\ double,\ double,\ double)
comment31.text=\r\n\ Draws\ an\ image\ on\ the\ console,\ stretched\ to\ a\ given\ height\ and\ width.\r\n\r\n\ @param\ img\ \ \ \ The\ Image\ object\ to\ draw\r\n\ @param\ x\ \ \ \ \ \ The\ location\ of\ the\ left\ side\r\n\ @param\ y\ \ \ \ \ \ The\ location\ of\ the\ top\ of\ the\ image\r\n\ @param\ width\ \ The\ width\ of\ the\ image\ in\ pixels\r\n\ @param\ height\ The\ height\ of\ the\ image\ in\ pixels\r\n
comment32.params=x\ y\ width\ height
comment32.target=void\ strokeStar(double,\ double,\ double,\ double)
comment32.text=\r\n\ Draws\ a\ star\ outline\ on\ the\ console\ from\ (x,\ y)\ to\ (x\ +\ width,\ y\ +\r\n\ width).\ Adapted\ from\ hsa.\r\n\r\n\ @param\ x\ \ \ \ \ \ The\ x\ coordinate\ of\ the\ top\ left\ corner\ of\ the\ rectangle\ that\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ star\ is\ inscribed\ in.\r\n\ @param\ y\ \ \ \ \ \ The\ y\ coordinate\ of\ the\ top\ left\ corner\ of\ the\ rectangle\ that\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ star\ is\ inscribed\ in.\r\n\ @param\ width\ \ The\ width\ of\ the\ rectangle\ that\ the\ star\ is\ inscribed\ in.\r\n\ @param\ height\ The\ height\ of\ the\ rectangle\ that\ the\ star\ is\ inscribed\ in.\r\n
comment33.params=x\ y\ width\ height
comment33.target=void\ fillStar(double,\ double,\ double,\ double)
comment33.text=\r\n\ Draws\ a\ filled\ star\ on\ the\ console\ from\ (x,\ y)\ to\ (x\ +\ width,\ y\ +\ width).\r\n\ Adapted\ from\ hsa.\r\n\r\n\ @param\ x\ \ \ \ \ \ The\ x\ coordinate\ of\ the\ top\ left\ corner\ of\ the\ rectangle\ that\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ star\ is\ inscribed\ in.\r\n\ @param\ y\ \ \ \ \ \ The\ y\ coordinate\ of\ the\ top\ left\ corner\ of\ the\ rectangle\ that\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ star\ is\ inscribed\ in.\r\n\ @param\ width\ \ The\ width\ of\ the\ rectangle\ that\ the\ star\ is\ inscribed\ in.\r\n\ @param\ height\ The\ height\ of\ the\ rectangle\ that\ the\ star\ is\ inscribed\ in.\r\n
comment34.params=x\ y\ width\ height
comment34.target=void\ strokeMapleLeaf(double,\ double,\ double,\ double)
comment34.text=\r\n\ Draws\ a\ maple\ leaf\ outline\ on\ the\ console\ from\ (x,\ y)\ to\ (x\ +\ width,\ y\ +\r\n\ width).\ Adapted\ from\ hsa.\r\n\r\n\ @param\ x\ \ \ \ \ \ The\ x\ coordinate\ of\ the\ top\ left\ corner\ of\ the\ rectangle\ that\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ maple\ leaf\ is\ inscribed\ in.\r\n\ @param\ y\ \ \ \ \ \ The\ y\ coordinate\ of\ the\ top\ left\ corner\ of\ the\ rectangle\ that\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ maple\ leaf\ is\ inscribed\ in.\r\n\ @param\ width\ \ The\ width\ of\ the\ rectangle\ that\ the\ maple\ leaf\ is\ inscribed\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ in.\r\n\ @param\ height\ The\ height\ of\ the\ rectangle\ that\ the\ maple\ leaf\ is\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ inscribed\ in.\r\n
comment35.params=x\ y\ width\ height
comment35.target=void\ fillMapleLeaf(double,\ double,\ double,\ double)
comment35.text=\r\n\ Draws\ a\ filled\ maple\ leaf\ on\ the\ console\ from\ (x,\ y)\ to\ (x\ +\ width,\ y\ +\r\n\ width).\ Adapted\ from\ hsa.\r\n\r\n\ @param\ x\ \ \ \ \ \ int\ The\ x\ coordinate\ of\ the\ top\ left\ corner\ of\ the\ rectangle\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ that\ the\ maple\ leaf\ is\ inscribed\ in.\r\n\ @param\ y\ \ \ \ \ \ int\ The\ y\ coordinate\ of\ the\ top\ left\ corner\ of\ the\ rectangle\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ that\ the\ maple\ leaf\ is\ inscribed\ in.\r\n\ @param\ width\ \ int\ The\ width\ of\ the\ rectangle\ that\ the\ maple\ leaf\ is\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ inscribed\ in.\r\n\ @param\ height\ int\ The\ height\ of\ the\ rectangle\ that\ the\ maple\ leaf\ is\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ inscribed\ in.\r\n
comment36.params=row\ col
comment36.target=void\ setCursor(int,\ int)
comment36.text=\r\n\ Set\ the\ row\ and\ column\ for\ print/println.\r\n\r\n\ @param\ row\ The\ row\ number\ (0\ \=\ top)\r\n\ @param\ col\ The\ column\ number\ (0\ \=\ left)\r\n
comment37.params=
comment37.target=int\ getColumn()
comment37.text=\r\n\ Retrieve\ the\ current\ column\ for\ print/println.\r\n\r\n\ @return\ The\ current\ column\r\n
comment38.params=
comment38.target=int\ getRow()
comment38.text=\r\n\ Retrieve\ the\ current\ row\ for\ print/println.\r\n\r\n\ @return\ The\ current\ row\r\n
comment39.params=
comment39.target=int\ getNumColumns()
comment39.text=\r\n\ Get\ the\ total\ number\ of\ columns\ on\ the\ console\ for\ print/println.\r\n\r\n\ @return\ The\ number\ of\ columns\ available\r\n
comment4.params=
comment4.target=void\ clear()
comment4.text=\r\n\ Clears\ the\ console\ to\ the\ background\ color\r\n
comment40.params=
comment40.target=int\ getNumRows()
comment40.text=\r\n\ Get\ the\ total\ number\ of\ rows\ on\ the\ console\ for\ print/println.\r\n\r\n\ @return\ The\ number\ of\ rows\ available\r\n
comment41.params=text
comment41.target=void\ print(java.lang.String)
comment41.text=\r\n\ Write\ a\ string\ to\ the\ Console.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ text\ The\ string\ to\ be\ written\ to\ the\ Console\r\n
comment42.params=
comment42.target=void\ println()
comment42.text=\r\n\ Writes\ a\ newline\ to\ the\ GraphicsConsole.\ Adapted\ from\ hsa.\r\n
comment43.params=number
comment43.target=void\ println(byte)
comment43.text=\r\n\ Writes\ the\ text\ representation\ of\ an\ 8-bit\ integer\ (a\ "byte")\ to\ the\r\n\ GraphicsConsole\ followed\ by\ a\ newline.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n
comment44.params=number\ fieldSize
comment44.target=void\ println(byte,\ int)
comment44.text=\r\n\ Writes\ the\ text\ representation\ of\ an\ 8-bit\ integer\ (a\ "byte")\ to\ the\r\n\ GraphicsConsole\ with\ a\ specified\ field\ size\ followed\ by\ a\ newline.\r\n\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ \ \ \ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ The\ field\ width\ that\ the\ number\ is\ to\ be\ written\ in.\r\n
comment45.params=ch
comment45.target=void\ println(char)
comment45.text=\r\n\ Writes\ a\ character\ to\ the\ GraphicsConsole\ followed\ by\ a\ newline.\ Adapted\r\n\ from\ hsa.\r\n\r\n\ @param\ ch\ The\ character\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n
comment46.params=ch\ fieldSize
comment46.target=void\ println(char,\ int)
comment46.text=\r\n\ Writes\ a\ character\ to\ the\ GraphicsConsole\ with\ a\ specified\ field\ size.\r\n\ Adapted\ from\ hsa.\r\n\r\n\ @param\ ch\ \ \ \ \ \ \ \ The\ character\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ The\ field\ width\ that\ the\ character\ is\ to\ be\ written\ in.\r\n
comment47.params=number
comment47.target=void\ println(double)
comment47.text=\r\n\ Writes\ a\ double\ precision\ floating\ point\ number\ (a\ "double")\ to\ the\r\n\ GraphicsConsole\ followed\ by\ a\ newline.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n
comment48.params=number\ fieldSize
comment48.target=void\ println(double,\ int)
comment48.text=\r\n\ Writes\ a\ double\ precision\ floating\ point\ number\ (a\ "double")\ to\ the\r\n\ GraphicsConsole\ with\ a\ specified\ field\ size\ followed\ by\ a\ newline.\r\n\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ \ \ \ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ The\ field\ width\ that\ the\ number\ is\ to\ be\ written\ in.\r\n
comment49.params=number\ fieldSize\ decimalPlaces
comment49.target=void\ println(double,\ int,\ int)
comment49.text=\r\n\ Writes\ a\ double\ precision\ floating\ point\ number\ (a\ "double")\ to\ the\r\n\ GraphicsConsole\ with\ a\ specified\ field\ size\ and\ a\ specified\ number\ of\r\n\ decimal\ places\ followed\ by\ a\ newline.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ \ \ \ \ \ \ \ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ \ \ \ \ The\ field\ width\ that\ the\ number\ is\ to\ be\ written\ in.\r\n\ @param\ decimalPlaces\ The\ number\ of\ decimal\ places\ of\ the\ number\ to\ be\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ displayed.\r\n
comment5.params=x\ y\ width\ height
comment5.target=void\ clearRect(double,\ double,\ double,\ double)
comment5.text=\r\n\ Clears\ a\ rectangle\ to\ the\ background\ color\r\n\r\n\ @param\ x\ \ \ \ \ \ left\ coordinate\ in\ pixels\r\n\ @param\ y\ \ \ \ \ \ top\ coordinate\ in\ pixels\r\n\ @param\ width\ \ width\ of\ rectangle\r\n\ @param\ height\ height\ of\ rectangle\r\n
comment50.params=number
comment50.target=void\ println(float)
comment50.text=\r\n\ Writes\ a\ floating\ point\ number\ (a\ "float")\ to\ the\ GraphicsConsole\r\n\ followed\ by\ a\ newline.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n
comment51.params=number\ fieldSize
comment51.target=void\ println(float,\ int)
comment51.text=\r\n\ Writes\ a\ floating\ point\ number\ (a\ "float")\ to\ the\ GraphicsConsole\ with\ a\r\n\ specified\ field\ size\ followed\ by\ a\ newline.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ \ \ \ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ The\ field\ width\ that\ the\ number\ is\ to\ be\ written\ in.\r\n
comment52.params=number\ fieldSize\ decimalPlaces
comment52.target=void\ println(float,\ int,\ int)
comment52.text=\r\n\ Writes\ a\ floating\ point\ number\ (a\ "double")\ to\ the\ GraphicsConsole\ with\ a\r\n\ specified\ field\ size\ and\ a\ specified\ number\ of\ decimal\ places\ followed\ by\r\n\ a\ newline.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ \ \ \ \ \ \ \ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ \ \ \ \ The\ field\ width\ that\ the\ number\ is\ to\ be\ written\ in.\r\n\ @param\ decimalPlaces\ The\ number\ of\ decimal\ places\ of\ the\ number\ to\ be\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ displayed.\r\n
comment53.params=number
comment53.target=void\ println(int)
comment53.text=\r\n\ Writes\ the\ text\ representation\ of\ an\ 32-bit\ integer\ (an\ "int")\ to\ the\r\n\ GraphicsConsole\ followed\ by\ a\ newline.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n
comment54.params=number\ fieldSize
comment54.target=void\ println(int,\ int)
comment54.text=\r\n\ Writes\ the\ text\ representation\ of\ an\ 32-bit\ integer\ (an\ "int")\ to\ the\r\n\ GraphicsConsole\ with\ a\ specified\ field\ size\ followed\ by\ a\ newline.\r\n\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ \ \ \ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ The\ field\ width\ that\ the\ number\ is\ to\ be\ written\ in.\r\n
comment55.params=number
comment55.target=void\ println(long)
comment55.text=\r\n\ Writes\ the\ text\ representation\ of\ an\ 64-bit\ integer\ (a\ "long")\ to\ the\r\n\ GraphicsConsole\ followed\ by\ a\ newline.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n
comment56.params=number
comment56.target=void\ print(byte)
comment56.text=\r\n\ Writes\ the\ text\ representation\ of\ an\ 8-bit\ integer\ (a\ "byte")\ to\ the\r\n\ GraphicsConsole.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n
comment57.params=number\ fieldSize
comment57.target=void\ print(byte,\ int)
comment57.text=\r\n\ Writes\ the\ text\ representation\ of\ an\ 8-bit\ integer\ (a\ "byte")\ to\ the\r\n\ GraphicsConsole\ with\ a\ specified\ field\ size.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ \ \ \ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ The\ field\ width\ that\ the\ number\ is\ to\ be\ written\ in.\r\n
comment58.params=ch
comment58.target=void\ print(char)
comment58.text=\r\n\ Writes\ a\ character\ to\ the\ GraphicsConsole.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ ch\ The\ character\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n
comment59.params=ch\ fieldSize
comment59.target=void\ print(char,\ int)
comment59.text=\r\n\ Writes\ a\ character\ to\ the\ GraphicsConsole\ with\ a\ specified\ field\ size.\r\n\ Adapted\ from\ hsa.\r\n\r\n\ @param\ ch\ \ \ \ \ \ \ \ The\ character\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ The\ field\ width\ that\ the\ character\ is\ to\ be\ written\ in.\r\n
comment6.params=color
comment6.target=void\ setFill(java.lang.String)
comment6.text=\r\n\ Sets\ the\ color\ to\ use\ for\ the\ fill\ commands\ as\ well\ as\ print/println.\r\n\r\n\ @param\ color\ Any\ legal\ CSS\ color\ string\ (color\ name,\ hex\ color,\ rgb,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ rgba,\ etc.)(color\r\n
comment60.params=number
comment60.target=void\ print(double)
comment60.text=\r\n\ Writes\ a\ double\ precision\ floating\ point\ number\ (a\ "double")\ to\ the\r\n\ GraphicsConsole.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n
comment61.params=number\ fieldSize
comment61.target=void\ print(double,\ int)
comment61.text=\r\n\ Writes\ a\ double\ precision\ floating\ point\ number\ (a\ "double")\ to\ the\r\n\ GraphicsConsole\ with\ a\ specified\ field\ size.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ \ \ \ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ The\ field\ width\ that\ the\ number\ is\ to\ be\ written\ in.\r\n
comment62.params=number\ fieldSize\ decimalPlaces
comment62.target=void\ print(double,\ int,\ int)
comment62.text=\r\n\ Writes\ a\ double\ precision\ floating\ point\ number\ (a\ "double")\ to\ the\r\n\ GraphicsConsole\ with\ a\ specified\ field\ size\ and\ a\ specified\ number\ of\r\n\ decimal\ places.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ \ \ \ \ \ \ \ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ \ \ \ \ The\ field\ width\ that\ the\ number\ is\ to\ be\ written\ in.\r\n\ @param\ decimalPlaces\ The\ number\ of\ decimal\ places\ of\ the\ number\ to\ be\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ displayed.\r\n
comment63.params=number
comment63.target=void\ print(float)
comment63.text=\r\n\ Writes\ a\ floating\ point\ number\ (a\ "float")\ to\ the\ GraphicsConsole.\r\n\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n
comment64.params=number\ fieldSize
comment64.target=void\ print(float,\ int)
comment64.text=\r\n\ Writes\ a\ floating\ point\ number\ (a\ "float")\ to\ the\ GraphicsConsole\ with\ a\r\n\ specified\ field\ size.\r\n\r\n\ @param\ number\ \ \ \ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ The\ field\ width\ that\ the\ number\ is\ to\ be\ written\ in.\r\n
comment65.params=number\ fieldSize\ decimalPlaces
comment65.target=void\ print(float,\ int,\ int)
comment65.text=\r\n\ Writes\ a\ floating\ point\ number\ (a\ "double")\ to\ the\ GraphicsConsole\ with\ a\r\n\ specified\ field\ size\ and\ a\ specified\ number\ of\ decimal\ places.\ Adapted\r\n\ from\ hsa.\r\n\r\n\ @param\ number\ \ \ \ \ \ \ \ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ \ \ \ \ The\ field\ width\ that\ the\ number\ is\ to\ be\ written\ in.\r\n\ @param\ decimalPlaces\ The\ number\ of\ decimal\ places\ of\ the\ number\ to\ be\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ displayed.\r\n
comment66.params=number
comment66.target=void\ print(int)
comment66.text=\r\n\ Writes\ the\ text\ representation\ of\ an\ 32-bit\ integer\ (an\ "int")\ to\ the\r\n\ GraphicsConsole.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n
comment67.params=number\ fieldSize
comment67.target=void\ print(int,\ int)
comment67.text=\r\n\ Writes\ the\ text\ representation\ of\ an\ 32-bit\ integer\ (an\ "int")\ to\ the\r\n\ GraphicsConsole\ with\ a\ specified\ field\ size.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ \ \ \ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ The\ field\ width\ that\ the\ number\ is\ to\ be\ written\ in.\r\n
comment68.params=number
comment68.target=void\ print(long)
comment68.text=\r\n\ Writes\ the\ text\ representation\ of\ an\ 64-bit\ integer\ (a\ "long")\ to\ the\r\n\ GraphicsConsole.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n
comment69.params=number\ fieldSize
comment69.target=void\ print(long,\ int)
comment69.text=\r\n\ Writes\ the\ text\ representation\ of\ an\ 64-bit\ integer\ (a\ "long")\ to\ the\r\n\ GraphicsConsole\ with\ a\ specified\ field\ size.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ \ \ \ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ The\ field\ width\ that\ the\ number\ is\ to\ be\ written\ in.\r\n
comment7.params=r\ g\ b
comment7.target=void\ setFill(int,\ int,\ int)
comment70.params=text\ fieldSize
comment70.target=void\ print(java.lang.String,\ int)
comment70.text=\r\n\ Writes\ a\ string\ to\ the\ GraphicsConsole\ with\ a\ specified\ field\ size.\r\n\ Adapted\ from\ hsa.\r\n\r\n\ @param\ text\ \ \ \ \ \ The\ string\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ The\ field\ width\ that\ the\ string\ is\ to\ be\ written\ in.\r\n
comment71.params=number
comment71.target=void\ print(short)
comment71.text=\r\n\ Writes\ the\ text\ representation\ of\ an\ 16-bit\ integer\ (a\ "short")\ to\ the\r\n\ GraphicsConsole.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n
comment72.params=number\ fieldSize
comment72.target=void\ print(short,\ int)
comment72.text=\r\n\ Writes\ the\ text\ representation\ of\ an\ 16-bit\ integer\ (a\ "short")\ to\ the\r\n\ GraphicsConsole\ with\ a\ specified\ field\ size.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ \ \ \ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ The\ field\ width\ that\ the\ number\ is\ to\ be\ written\ in.\r\n
comment73.params=value
comment73.target=void\ print(boolean)
comment73.text=\r\n\ Writes\ the\ text\ representation\ of\ a\ boolean\ to\ the\ GraphicsConsole.\r\n\ Adapted\ from\ hsa.\r\n\r\n\ @param\ value\ The\ boolean\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n
comment74.params=value\ fieldSize
comment74.target=void\ print(boolean,\ int)
comment74.text=\r\n\ Writes\ the\ text\ representation\ of\ a\ boolean\ to\ the\ GraphicsConsole\ with\ a\r\n\ specified\ field\ size.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ value\ \ \ \ \ The\ boolean\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ The\ field\ width\ that\ the\ boolean\ is\ to\ be\ written\ in.\r\n
comment75.params=number\ fieldSize
comment75.target=void\ println(long,\ int)
comment75.text=\r\n\ Writes\ the\ text\ representation\ of\ an\ 64-bit\ integer\ (a\ "long")\ to\ the\r\n\ GraphicsConsole\ with\ a\ specified\ field\ size\ followed\ by\ a\ newline.\r\n\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ \ \ \ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ The\ field\ width\ that\ the\ number\ is\ to\ be\ written\ in.\r\n
comment76.params=text
comment76.target=void\ println(java.lang.String)
comment76.text=\r\n\ Writes\ a\ string\ to\ the\ GraphicsConsole\ followed\ by\ a\ newline.\ Adapted\r\n\ from\ hsa.\r\n\r\n\ @param\ text\ The\ string\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n
comment77.params=text\ fieldSize
comment77.target=void\ println(java.lang.String,\ int)
comment77.text=\r\n\ Writes\ a\ string\ to\ the\ GraphicsConsole\ with\ a\ specified\ field\ size\r\n\ followed\ by\ a\ newline.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ text\ \ \ \ \ \ The\ string\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ The\ field\ width\ that\ the\ string\ is\ to\ be\ written\ in.\r\n
comment78.params=number
comment78.target=void\ println(short)
comment78.text=\r\n\ Writes\ the\ text\ representation\ of\ an\ 16-bit\ integer\ (a\ "short")\ to\ the\r\n\ GraphicsConsole\ followed\ by\ a\ newline.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n
comment79.params=number\ fieldSize
comment79.target=void\ println(short,\ int)
comment79.text=\r\n\ Writes\ the\ text\ representation\ of\ an\ 16-bit\ integer\ (a\ "short")\ to\ the\r\n\ GraphicsConsole\ with\ a\ specified\ field\ size\ followed\ by\ a\ newline.\r\n\ Adapted\ from\ hsa.\r\n\r\n\ @param\ number\ \ \ \ The\ number\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ The\ field\ width\ that\ the\ number\ is\ to\ be\ written\ in.\r\n
comment8.params=r\ g\ b\ a
comment8.target=void\ setFill(int,\ int,\ int,\ double)
comment80.params=value
comment80.target=void\ println(boolean)
comment80.text=\r\n\ Writes\ the\ text\ representation\ of\ a\ boolean\ to\ the\ GraphicsConsole\r\n\ followed\ by\ a\ newline.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ value\ The\ boolean\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n
comment81.params=value\ fieldSize
comment81.target=void\ println(boolean,\ int)
comment81.text=\r\n\ Writes\ the\ text\ representation\ of\ a\ boolean\ to\ the\ GraphicsConsole\ with\ a\r\n\ specified\ field\ size\ followed\ by\ a\ newline.\ Adapted\ from\ hsa.\r\n\r\n\ @param\ value\ \ \ \ \ The\ boolean\ to\ be\ written\ to\ the\ GraphicsConsole.\r\n\ @param\ fieldSize\ The\ field\ width\ that\ the\ boolean\ is\ to\ be\ written\ in.\r\n
comment82.params=o
comment82.target=void\ println(java.lang.Object)
comment83.params=o
comment83.target=void\ print(java.lang.Object)
comment84.params=
comment84.target=char\ getChar()
comment84.text=\r\n\ Pauses\ to\ read\ a\ character\ from\ the\ GraphicsConsole\ without\ showing\ the\r\n\ cursor.\r\n\r\n\ @return\ the\ character\ read.\r\n
comment85.params=cursor
comment85.target=char\ getChar(boolean)
comment85.text=\r\n\ Pauses\ to\ read\ the\ next\ character\ entered\ on\ the\ keyboard.\ Ignores\r\n\ characters\ currently\ in\ the\ line\ buffer.\r\n\r\n\ @param\ cursor\ T/F\ to\ indicate\ whether\ the\ cursor\ is\ displayed.\r\n\ @return\ The\ next\ character\ entered\ on\ the\ keyboard.\r\n
comment86.params=
comment86.target=char\ nextChar()
comment86.text=\r\n\ Reads\ a\ single\ character\ from\ the\ Console.\ Note\ that\ this\ discards\ any\r\n\ whitespace.\ If\ you\ want\ to\ get\ every\ character\ on\ the\ line,\ use\ the\r\n\ nextLine()\ method.\r\n\r\n\ @return\ The\ character\ read\ from\ the\ Console\r\n
comment87.params=
comment87.target=boolean\ nextBoolean()
comment87.text=\r\n\ Reads\ a\ boolean\ from\ the\ GraphicsConsole.\ The\ actual\ text\ in\ the\r\n\ GraphicsConsole\ must\ be\ either\ "true"\ or\ "false"\ although\ case\ is\r\n\ irrelevant.\r\n\r\n\ @return\ The\ boolean\ value\ read\ from\ the\ GraphicsConsole.\r\n
comment88.params=
comment88.target=byte\ nextByte()
comment88.text=\r\n\ Reads\ an\ 8-bit\ integer\ (a\ "byte")\ from\ the\ GraphicsConsole.\ The\ actual\r\n\ text\ in\ the\ GraphicsConsole\ must\ be\ a\ number\ from\ -128\ to\ 127.\r\n\r\n\ @return\ The\ byte\ value\ read\ from\ the\ GraphicsConsole.\r\n
comment89.params=
comment89.target=double\ nextDouble()
comment89.text=\r\n\ Reads\ a\ double\ precision\ floating\ point\ number\ (a\ "double")\ from\ the\r\n\ GraphicsConsole.\r\n\r\n\ @return\ The\ double\ value\ read\ from\ the\ GraphicsConsole.\r\n
comment9.params=color
comment9.target=void\ setStroke(java.lang.String)
comment9.text=\r\n\ Sets\ the\ color\ to\ use\ for\ the\ stroke\ commands\r\n\r\n\ @param\ color\ Any\ legal\ CSS\ color\ string\ (color\ name,\ hex\ color,\ rgb,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ rgba,\ etc.)(color\r\n
comment90.params=
comment90.target=float\ nextFloat()
comment90.text=\r\n\ Reads\ a\ floating\ point\ number\ (a\ "float")\ from\ the\ GraphicsConsole.\r\n\r\n\ @return\ The\ float\ value\ read\ from\ the\ GraphicsConsole.\r\n
comment91.params=
comment91.target=int\ nextInt()
comment91.text=\r\n\ Reads\ a\ 32-bit\ integer\ (an\ "int")\ from\ the\ GraphicsConsole.\ The\ actual\r\n\ text\ in\ the\ GraphicsConsole\ must\ be\ a\ number\ from\ -2147483648\ to\r\n\ 2147483647.\r\n\r\n\ @return\ The\ int\ value\ read\ from\ the\ GraphicsConsole.\r\n
comment92.params=
comment92.target=java.lang.String\ nextLine()
comment92.text=\r\n\ Reads\ a\ full\ line\ of\ text\ from\ the\ GraphicsConsole.\r\n\r\n\ @return\ The\ line\ of\ text\ read\ from\ the\ GraphicsConsole.\r\n
comment93.params=
comment93.target=long\ nextLong()
comment93.text=\r\n\ Reads\ a\ 64-bit\ integer\ (a\ "long")\ from\ the\ GraphicsConsole.\r\n\r\n\ @return\ The\ long\ value\ read\ from\ the\ GraphicsConsole.\r\n
comment94.params=
comment94.target=short\ nextShort()
comment94.text=\r\n\ Reads\ a\ 16-bit\ integer\ (a\ "short")\ from\ the\ GraphicsConsole.\ The\ actual\r\n\ text\ in\ the\ GraphicsConsole\ must\ be\ a\ number\ from\ -32768\ to\ 32767.\r\n\r\n\ @return\ The\ short\ value\ read\ from\ the\ GraphicsConsole.\r\n
comment95.params=
comment95.target=java.lang.String\ next()
comment95.text=\r\n\ Reads\ in\ input\ from\ the\ keyboard\ buffer\ until\ it\ hits\ a\ whitespace,\ which\r\n\ indicates\ the\ end\ of\ a\ token.\r\n\r\n\ @return\ the\ string\ read.\r\n
comment96.params=
comment96.target=java.lang.String\ getKeyCode()
comment96.text=\r\n\ Returns\ the\ code\ for\ the\ key\ currently\ held\ down.\r\n\r\n\ @return\ A\ String\ value\ representing\ the\ keycode\r\n
comment97.params=
comment97.target=char\ getKeyChar()
comment97.text=\r\n\ Returns\ the\ char\ for\ the\ key\ currently\ held\ down.\r\n\r\n\ @return\ the\ char\ that\ was\ typed\r\n
comment98.params=
comment98.target=java.lang.String\ getLastKeyCode()
comment98.text=\r\n\ Returns\ the\ code\ for\ the\ last\ key\ pressed.\r\n\r\n\ @return\ A\ String\ value\ representing\ the\ keycode\r\n
comment99.params=
comment99.target=char\ getLastKeyChar()
comment99.text=\r\n\ Returns\ the\ char\ for\ the\ last\ key\ that\ was\ pressed.\r\n\r\n\ @return\ the\ char\ that\ was\ typed\r\n
numComments=138
